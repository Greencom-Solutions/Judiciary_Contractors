@model Latest_Staff_Portal.ViewModel.TeamLeadSelections

@{
    Layout = "~/Views/Shared/Sitemaster.cshtml";

    var isManager = ViewBag.isManager;

}
<style>
    thead {
        background-color: black;
        color: white;
    }

    hr {
        margin: 4px;
    }

    .BtnPadding {
        padding: 1px;
        font-size: 12px;
    }
</style>

<div class="page-header">
    <div class="row">
        <div class="col-sm-12">
            <ul class="breadcrumb">
                <li class="breadcrumb-item"><a href="#" onclick="FirstStakeholderMeetingLink();">First Stakeholder Meeting List</a></li>
                <li class="breadcrumb-item active">First Stakeholder Meeting Document (@Model.No)</li>
            </ul>
        </div>
    </div>
</div>
<hr />
<br />


<div class="card">
    <div class="card-header">
        <h4> First Stakeholder Meeting Document</h4>
        <div style="text-align:right; margin-bottom: 20px">
            @{
                if (!@Model.Design_Created && @Model.isManager)
                {
                    <button style="background: #162f25; color: whitesmoke; border-radius: 10px" onclick="CreatePreliminaryDesign('@Model.No');">
                        <i class="fa fa-check" aria-hidden="true"></i> Create Preliminary Design
                    </button>
                }
            }

        </div>
    </div>

    <div class="card-body">
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("No", htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.No, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color: #dedebd;", @id = "No" } })
                    @Html.ValidationMessageFor(model => model.No, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("User Request No", htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.Project_Code, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color: #dedebd;", @id = "Project_Code" } })
                    @Html.ValidationMessageFor(model => model.Project_Code, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Project Name", htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.Project_Name, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color: #dedebd;", @id = "Project_Name" } })
                    @Html.ValidationMessageFor(model => model.Project_Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Geographical Unit Name", htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.Administrative_Unit, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color: #dedebd;", @id = "Administrative_Unit" } })
                    @Html.ValidationMessageFor(model => model.Administrative_Unit, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Committee Chair", htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.Chair_Name, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color: #dedebd;", @id = "Chair_Name" } })
                    @Html.ValidationMessageFor(model => model.Chair_Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Date of Meeting", htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.Date_of_Meeting, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color: #dedebd;", @id = "Date_of_Meeting" } })
                    @Html.ValidationMessageFor(model => model.Date_of_Meeting, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Caseload", htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.Caseload, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color: #dedebd;", @id = "Caseload" } })
                    @Html.ValidationMessageFor(model => model.Caseload, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Caseload Category", htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.Caseload_Category, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color: #dedebd;", @id = "Caseload_Category" } })
                    @Html.ValidationMessageFor(model => model.Caseload_Category, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Objective Of Engagement", htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.Objective_of_engagement, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color: #dedebd", @id = "Objective_of_engagement" } })
                    @Html.ValidationMessageFor(model => model.Objective_of_engagement, "", new { @class = "text-danger" })
                </div>
            </div>

        </div>

        <hr />
        @{
            if (@Model.isManager)
            {
                <div align="center" id="DivUpdateButton">
                    <input type="button" class="btn btn-primary waves-effect waves-light" value="Update Header" onclick="UpdateMeetingHeader();" />
                </div>
                <div align="center" id="DivSubmitUpdateButton" hidden>
                    <input type="button" class="btn btn-primary waves-effect waves-light" value="Submit" onclick="SubmitUpdatedMeetingHeader();" />
                </div>
            }
        }

        <div id="DivStakeholderFeedbackLines" style="margin: 10px 20px">
            <hr style="border:1px solid black" />
            <b>Stakeholder Feedback</b>
            <hr />
            <div id="divStakeholderFeedbackLines"></div>
        </div>

        <div id="DivProjectTeamLines" style="margin: 10px 20px">
            <hr style="border:1px solid black" />
            <b>Project Team Lines</b>
            <hr />
            <div id="divProjectTeamLines"></div>
            <hr style="border:1px solid black" />
        </div>

        <div id="DivDocumentAttcahments" style="margin: 10px 20px">

            <b>Document Attachments</b>
            <hr />
            <div id="divAttachDocs"></div>
        </div>
    </div>
</div>



@*//////////////////////Update header Modal////////////////////////////*@
<div class="modal fade" id="updateHeader" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content bg-white">
            <div class="modal-header">
                <h4 class="modal-title">Update Document</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modalBody2">
                <!-- Content injected here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" onclick="SubmitUpdatedMeetingHeader();">Update</button>
                <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>



@*//////////////////////New team member Modal////////////////////////////*@
<div class="modal" id="addTeamMemberModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content bg-white">
            <div class="modal-header">
                <h4 class="modal-title">Add Team Member</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="addTeamMemberModalBody">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger waves-effect " data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


@*//////////////////////New stakeholder feedback Modal////////////////////////////*@
<div class="modal" id="myModal3" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content bg-white">
            <div class="modal-header">
                <h4 class="modal-title">Add Stakeholder Feedback</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modalBody3">
            </div>
            <div class="modal-footer">
                <input type="button" class="btn btn-primary waves-effect waves-light" value="Submit Feedback" onclick="SubmitStakeholderFeedback();" />
                <button type="button" class="btn btn-danger waves-effect " data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


@*//////////////////////Add attachment modal////////////////////////////*@
<div id="myModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title mt-0" id="myModalLabel"><label id="labelF"></label></h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modalBody">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary waves-effect" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal View Doc -->
<div class="modal fade" id="myModalAttachment" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content bg-white">
            <div class="modal-header">
                <h4 class="modal-title">Attachment</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modalAttachmentBody" style="width:100%;height:450px"></div>
        </div>
    </div>
</div>



<script>
    $(document).ready(function () {
        LoadProjectTeamLines(`@Model.No`, `@Model.isManager`);
        LoadStakeholderFeedbackLines(`@Model.No`, `@Model.isManager`)
        var Successmsg = '@Request.RequestContext.HttpContext.Session["SuccessMsg"]';
        if (Successmsg != "") {
             Swal.fire('Success', Successmsg, 'success', true);
             $.ajax({
                 type: "POST",
                 url: "/Common/NullibySessions"
             });
        }
        GetDocumentAttachments();
        $('.select2').select2();
    });

    var LoadStakeholderFeedbackLines = function (No, isManager) {

        $.ajax({
            async: true,
            type: "POST",
            datatype: "html",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ No: No, isManager: isManager }),
            url: "/ProjectManagement/StakeholderFeedbackLines",
            success: function (data) {
                $("#divStakeholderFeedbackLines").html(data);
                HideProgress();
                //GetDocumentAttachments();
            },
            error: function () {
                HideProgress();
                Swal.fire("There is some problem to process your request. Please try after some time");
            }
        });
    };
    var LoadProjectTeamLines = function (No, isManager) {

        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "html",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ No: No, isManager: isManager }),
            url: "/ProjectManagement/ProjectTeamLines",
            success: function (data) {
                $("#divProjectTeamLines").html(data);
                HideProgress();
                //GetDocumentAttachments();
            },
            error: function () {
                HideProgress();
                Swal.fire("There is some problem to process your request. Please try after some time");
            }
        });
    };
    function FirstStakeholderMeetingLink() {
        window.location.href = "FirstStakeholderMeetingList";
    }


    function UpdateMeetingHeader() {
        document.getElementById("Chair_Name").removeAttribute("readonly");
        document.getElementById("Chair_Name").style.backgroundColor = "";
        document.getElementById("Date_of_Meeting").removeAttribute("readonly");
        document.getElementById("Date_of_Meeting").style.backgroundColor = "";
        document.getElementById("Caseload").removeAttribute("readonly");
        document.getElementById("Caseload").style.backgroundColor = "";
        document.getElementById("Caseload_Category").removeAttribute("readonly");
        document.getElementById("Caseload_Category").style.backgroundColor = "";
        document.getElementById("Objective_of_engagement").removeAttribute("readonly");
        document.getElementById("Objective_of_engagement").style.backgroundColor = "";

        document.getElementById("DivUpdateButton").setAttribute("hidden", "");
        document.getElementById("DivSubmitUpdateButton").removeAttribute("hidden");

    }

    function SubmitUpdatedMeetingHeader() {
        alert("Submitted")
    }


    var AddProjectMemberLine = function () {

        var Project_No = '@Model.No';
         ShowProgress();
         $.ajax({
             async: true,
             type: "GET",
             dataType: "html",
             url: '/ProjectManagement/NewTeamMemberLine',
             data: { Project_No, Project_No },
             success: function (data) {
                 $("#addTeamMemberModalBody").html(data);
                 HideProgress();
                 $("#addTeamMemberModal").modal("show");
             },
             error: function (err) {
                 HideProgress();
                 Swal.fire('Warning', err.responseText, 'warning');
             }
         });
    }
    var AddStakeholderFeedback = function () {
         var Project_No = '@Model.No';
         ShowProgress();
         $.ajax({
             async: true,
             type: "GET",
             dataType: "html",
             url: '/ProjectManagement/NewStakeholderFeedback',
             data: { Project_No: Project_No },
             success: function (data) {
                 $("#modalBody3").html(data);
                 HideProgress();
                 $("#myModal3").modal("show");
             },
             error: function (err) {
                 HideProgress();
                 Swal.fire('Warning', err.responseText, 'warning');
             }
         });
    }
    function SubmitStakeholderFeedback() {
        var isValid = true;

        // Collect data from the form
        var Project_No = `@Model.No`;
        var Suggestion = $("#Suggestion").val();
        var Loc= $("#Location").val();
        var Proponent = $("#Proponent").val();
        var Status_Of_Suggestion = $("#Status_Of_Suggestion").val();

         // Validation checks
        if (!Suggestion) {
            Swal.fire('Warning', 'Enter Suggestion.', 'warning');
            isValid = false;
        }

        if (!Loc) {
            Swal.fire('Warning', 'Enter Location.', 'warning');
            isValid = false;
        }

        if (!Status_Of_Suggestion) {
            Swal.fire('Warning', 'Select Status Of Suggestion.', 'warning');
            isValid = false;
        }

        if (!Proponent) {
            Swal.fire('Warning', 'Select Proponent.', 'warning');
            isValid = false;
        }

        // Exit if validation fails
        if (!isValid) {
            return;
        }

        // Prepare data object
        var newSuggestion= {
            No: Project_No,
            Suggestion: Suggestion,
            Location: Loc,
            Proponent: Proponent,
            Status_Of_Suggestion: Status_Of_Suggestion
        };

        // Show progress indicator
        ShowProgress();
        $.ajax({
            type: "POST",
            url: "/ProjectManagement/SubmitStakeholderFeedback",
            data: JSON.stringify(newSuggestion),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                HideProgress();
                if (data.success) {
                    Swal.fire('Success', 'Record submitted successfully.', 'success').then(() => {
                        ViewDoc(data.message);
                    });
                } else {
                    Swal.fire('Warning', data.message, 'warning');
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Error', 'An error occurred while submitting the request.', 'error');
            }
        });
    }
    var ViewDoc = function (DocNo) {
        ShowProgress();
        var form = $('<form>', {
            action: '/ProjectManagement/FirstStakeholderMeetingDocumentView',
            method: 'POST'
        }).append($('<input>', {
            type: 'hidden',
            name: 'No',
            value: DocNo
        }));
        form.appendTo('body').submit();
    };
    function SubmitTeamMember() {
      var isValid = true;

      // Collect data from the form
       var Project_No = `@Model.No`;
       var Resource = $("#No").val();
       var Expertise = $("#Expertise").val();
       var Involvement_Stage = $("#Involvement_Stage").val();

      // Validation checks
       if (!Resource) {
      Swal.fire('Warning', 'Select Resource.', 'warning');
      isValid = false;
       }

       if (!Expertise) {
           Swal.fire('Warning', 'Select Expertise.', 'warning');
           isValid = false;
       }

       if (!Involvement_Stage) {
           Swal.fire('Warning', 'Select Involvement Stage.', 'warning');
           isValid = false;
       }

      // Exit if validation fails
      if (!isValid) {
      return;
      }

      // Prepare data object
      var newTeamLead = {
        Design_No: Project_No,
        No: Resource,
        Expertise: Expertise,
        Involvement_Stage: Involvement_Stage

      };

      // Show progress indicator
      ShowProgress();
      $.ajax({
          type: "POST",
          url: "/ProjectManagement/SubmitTeamMember",
         data: JSON.stringify(newTeamLead),
         contentType: "application/json; charset=utf-8",
         dataType: "json",
      success: function (data) {
          HideProgress();
          if (data.success) {
              Swal.fire('Success', 'Record submitted successfully.', 'success').then(() => {
                  ViewDoc(data.message);
                  /*windows.location.reload();*/
              });
          } else {
            Swal.fire('Warning', data.message, 'warning');
          }
      },
      error: function (err) {
      HideProgress();
      Swal.fire('Error', 'An error occurred while submitting the request.', 'error');
      }
      });
  }
    var GetDocumentAttachments = function () {
	    var DocNo = `@Model.No`;
        var status = "Open";
	    $.ajax({
		    async: true,
		    type: "POST",
		    datatype: "json",
		    contentType: "application/json; charset = utf-8",
		    processData: false,
            data: JSON.stringify({ DocNo: DocNo, documentStatus: status }),
            url: "/Common/EdmsDocumentAttachmentList",
		    success: function (data) {
			    $("#divAttachDocs").html(data);
		    },
		    error: function () {
			    Swal.fire("There is some problem to process your request. Please try after some time");
		    }
	    });
    };
    var AddAttachment = function () {
        $("#labelF").text("File Upload");
        ShowProgress();
        $.ajax({
            async: true,
            type: "GET",
            datatype: "html",
            url: '/Common/FileUploadForm',
            success: function (data) {
                $("#modalBody").html(data);
                HideProgress();
                $("#myModal").modal("show");
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    };
    var SaveAttachmentFile = function () {
	    var DocNo = `@Model.No`;
	    var filename; var base64String; var filetype;
        var files = document.getElementById('AttachmentFile').files;
	    if (files.length) {
		    var file = files[0];
            if (file.size > 50000000) {
                Swal.fire('Warning', 'Please only files less than 50MB allowed. Thanks!!', 'warning');
            }
		    else {
			    var blob = file.slice();
			    filetype = file.type;
			    filename = file.name;
			    var reader = new FileReader();
			    reader.onloadend = function (evt) {
				    if (evt.target.readyState == FileReader.DONE) {
					    var cont = evt.target.result
					    base64String = getB64Str(cont);
					    ShowProgress();
					    $.ajax({
						    type: "POST",
						    url: "/Common/SaveAttachedFile",
                            data: JSON.stringify({ DocNo: DocNo, base64Upload: base64String, fileName: filename, Extn: filetype, TableID: 77352, module: "PJM", documentType:"User Request"}),
						    contentType: "application/json; charset=utf-8",
						    dataType: "json",
						    success: function (data) {
							    if (data.success) {
								    HideProgress();
								    $("#myModal").modal("hide");
								    Swal.fire('Success', data.message, 'success');
                                    GetDocumentAttachments();
							    }
							    else {
                                    GetDocumentAttachments();
								    Swal.fire('Warning', data.message, 'warning');
								    HideProgress();
							    }
						    },
						    error: function (err) {
							    HideProgress();
							    Swal.fire('Warning', err, 'warning');
						    }
					    });
				    }
			    };
			    reader.readAsArrayBuffer(blob);
		    }
	    }
    };
    function getB64Str(buffer) {
        var binary = '';
        var bytes = new Uint8Array(buffer);
        var len = bytes.byteLength;
        for (var i = 0; i < len; i++) {
            binary += String.fromCharCode(bytes[i]);
        }
        return window.btoa(binary);
    }
    var DeleteAttachment = function (docId, line) {
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            dataType: "json",
            data: JSON.stringify({
                documentId: docId,
                lineNo: line
            }),
            contentType: "application/json; charset=utf-8",
            processData: false,
            url: '/Common/RemoveFileAsync',
            success: function (data) {
                HideProgress();
                if (data.success === true) {
                    Swal.fire('Success', data.message, 'success');
                    GetDocumentAttachments();
                } else {
                    Swal.fire('Error', data.message, 'error');
                    GetDocumentAttachments();
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err.responseText, 'warning');
            }
        });
    };
    var ViewAttachment = function (moduleCheck, docNo, docId) {
        $.ajaxSetup({ cache: false });
        ShowProgress();
        var viewer = $("#modalAttachmentBody");
        viewer.empty();

        $.ajax({
            url: '/Common/GetEdmsDocuments',
            type: "GET",
            datatype: "json",
            cache: false,
            contentType: "application/json; charset=utf-8",
            data: {
                module: moduleCheck,
                documentNo: docNo,
                documentType: "User request",
                documentId: docId
            },
            success: function (data) {
                if (data.success) {
                    if (data.base64) {
                        var mimeType = data.mimeType || 'application/pdf';

                        if (mimeType.startsWith('application/pdf')) {

                            var byteCharacters = atob(data.base64);
                            var byteNumbers = new Array(byteCharacters.length);
                            for (var i = 0; i < byteCharacters.length; i++) {
                                byteNumbers[i] = byteCharacters.charCodeAt(i);
                            }
                            var byteArray = new Uint8Array(byteNumbers);
                            var blob = new Blob([byteArray], { type: mimeType });
                            var blobUrl = URL.createObjectURL(blob);


                            viewer.html('<iframe src="' + blobUrl + '" style="width:100%; height:500px;" frameborder="0"></iframe>');
                        } else if (mimeType.startsWith('image/')) {

                            viewer.html('<img src="data:' + mimeType + ';base64,' + data.base64 + '" style="width:100%;"/>');
                        } else {
                            var blob = b64toBlob(data.base64, mimeType);
                            var url = window.URL.createObjectURL(blob);
                            window.open(url, '_blank');
                        }
                        $("#myModalAttachment").modal("show");
                    } else {

                        window.location = '/Common/AttachmentDownload?fileName=' + data.message;
                        Swal.fire('Success', 'Document Downloaded successfully', 'success');
                    }
                } else {
                    Swal.fire('Warning', data.message, 'warning');
                }
                HideProgress();
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Error', err.responseText || 'An error occurred', 'error');
            }
        });
    };
    function b64toBlob(base64, contentType) {
        var byteCharacters = atob(base64);
        var byteArrays = [];

        for (var offset = 0; offset < byteCharacters.length; offset += 512) {
            var slice = byteCharacters.slice(offset, offset + 512);

            var byteNumbers = new Array(slice.length);
            for (var i = 0; i < slice.length; i++) {
                byteNumbers[i] = slice.charCodeAt(i);
            }

            var byteArray = new Uint8Array(byteNumbers);
            byteArrays.push(byteArray);
        }

        return new Blob(byteArrays, { type: contentType });
    }




    function CreatePreliminaryDesign() {
        var No = '@Model.No';
        // Show progress indicator
        ShowProgress();
        $.ajax({
            type: "POST",
            url: "/ProjectManagement/CreatePreliminaryDesign",
            data: JSON.stringify({ No: No }), // Serialize data to JSON
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                HideProgress();
                if (data.success) {
                    Swal.fire('Success', 'Record submitted successfully.', 'success').then(() => {
                        ViewDoc(data.message);
                    });
                } else {
                    Swal.fire('Warning', data.message, 'warning');
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Error', 'An error occurred while submitting the request.', 'error');
            }
        });

 }

</script>

