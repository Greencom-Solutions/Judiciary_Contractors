@model Latest_Staff_Portal.ViewModel.ProjectProposals

@{
    Layout = "~/Views/Shared/Sitemaster.cshtml";
}
<style>
    thead {
        background-color: black;
        color: white;
    }

    hr {
        margin: 4px;
    }

    .BtnPadding {
        padding: 1px;
        font-size: 12px;
    }
</style>


<div class="page-header">
    <div class="row">
        <div class="col-sm-12">
            <ul class="breadcrumb">
                <li class="breadcrumb-item"><a href="#" onclick="UserRequestsLink(@Model.Status);">User Requests</a></li>
                <li class="breadcrumb-item active">User Requests Document (@Model.No)</li>
            </ul>
        </div>
    </div>
</div>
<hr />
<br />

<div class="card">
    <div class="card-header">
        <h4>User Requests</h4>
        <div style="text-align:right; margin-bottom: 20px">
            @{
                if (@Model.Request_Status == "Open")
                {
                    <button style="background: #162f25; color: whitesmoke; border-radius: 10px" onclick="SubmitRequest('@Model.No');">
                        <i class="fa fa-check" aria-hidden="true"></i> Submit Request
                    </button>
                }

                if (@Model.Request_Status == "Submitted" && @Model.Created_By == @Model.LoggedInUserID)
                {
                    <button style="background: #162f25; color: whitesmoke; border-radius: 10px" onclick="CancelRequestSubmit('@Model.No');">
                        <i class="fa fa-check" aria-hidden="true"></i> Cancel Request Submit
                    </button>
                }


                if (@Model.Request_Status == "Submitted" && @Model.IsManager)
                {
                    <button style="background: #162f25; color: whitesmoke; border-radius: 10px" onclick="ReceiveUserRequest('@Model.No');">
                        <i class="fa fa-check" aria-hidden="true"></i> Receive Request
                    </button>
                }


                if (@Model.Request_Status == "Received" && @Model.IsManager)
                {
                    if (!@Model.Design_Created)
                    {

                        <button style="background: #162f25; color: whitesmoke; border-radius: 10px" onclick="CreateProjectLeadSelection('@Model.No');">
                            <i class="fa fa-check" aria-hidden="true"></i> Initiate Team Lead Selection
                        </button>
                    }
                }


            }

        </div>
    </div>

    <div class="card-body">


        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("No", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.No, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color: #dedebd;" } })
                    @Html.ValidationMessageFor(model => model.No, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Name", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color: #dedebd;" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Admin Unit Code", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Global_Dimension_2_Code, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color: #dedebd;" } })
                    @Html.ValidationMessageFor(model => model.Global_Dimension_2_Code, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Admin Unit Name", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Administration_Unit_Name, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color: #dedebd;" } })
                    @Html.ValidationMessageFor(model => model.Administration_Unit_Name, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("County Code", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.County, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color: #dedebd;" } })
                    @Html.ValidationMessageFor(model => model.County, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("County Name", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.County_Name, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color: #dedebd;" } })
                    @Html.ValidationMessageFor(model => model.County_Name, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Sub County Code", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Sub_County, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color: #dedebd;" } })
                    @Html.ValidationMessageFor(model => model.Sub_County, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Sub County Name", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Sub_County_Name, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color: #dedebd;" } })
                    @Html.ValidationMessageFor(model => model.Sub_County_Name, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Request Description", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Request_Description, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color: #dedebd;" } })
                    @Html.ValidationMessageFor(model => model.Request_Description, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Justification", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Justification, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color: #dedebd;" } })
                    @Html.ValidationMessageFor(model => model.Justification, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Request Source", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Request_Source, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color: #dedebd;" } })
                    @Html.ValidationMessageFor(model => model.Request_Source, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Created By", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Created_By, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color: #dedebd;" } })
                    @Html.ValidationMessageFor(model => model.Created_By, "", new { @class = "text-danger" })
                </div>
            </div>
            @* <div class="col-md-6">
                    <div class="form-group">
                        @Html.Label("Employee No", htmlAttributes: new { @class = "control-label col-md-2" })

                        @Html.EditorFor(model => model.Employee_No, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color: #dedebd;" } })
                        @Html.ValidationMessageFor(model => model.Employee_No, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.Label("Employee Name", htmlAttributes: new { @class = "control-label col-md-2" })

                        @Html.EditorFor(model => model.Employee_Name, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color: #dedebd;" } })
                        @Html.ValidationMessageFor(model => model.Employee_Name, "", new { @class = "text-danger" })
                    </div>
                </div>*@
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Status", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Status, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color: #dedebd;" } })
                    @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Request Status", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Request_Status, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color: #dedebd;" } })
                    @Html.ValidationMessageFor(model => model.Request_Status, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>


        <div id="divDepositLines" class="mb-5 mt-5">
            @* <hr style="border:1px solid black" />
                <b>User Requests Lines</b>
                <hr />*@
            <div id="divLines"></div>
            <hr style="border:1px solid black" />
            <b>Document Attachments</b>
            <hr />
            <div id="divAttachDocs"></div>

        </div>




    </div>
</div>

@*//////////////////////Modal////////////////////////////*@
<div id="myModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title mt-0" id="myModalLabel"><label id="labelF"></label></h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modalBody">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary waves-effect" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal View Doc -->
<div class="modal fade" id="myModalAttachment" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content bg-white">
            <div class="modal-header">
                <h4 class="modal-title">Attachment</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modalAttachmentBody" style="width:100%;height:450px"></div>
        </div>
    </div>
</div>



<script>
    $(document).ready(function () {
        GetDocumentAttachments();
        $('.select2').select2();
    });

    function UserRequestsLink(status) {
        window.location.href = `ProjectManagement/UserRequests?status=${status}`;
    }
    var ViewDoc = function (DocNo) {
        ShowProgress();
        var form = $('<form>', {
            action: '/ProjectManagement/UserRequestsDocumentView',
            method: 'POST'
        }).append($('<input>', {
            type: 'hidden',
            name: 'No',
            value: DocNo
        }));
        form.appendTo('body').submit();
    };

 

    var GetDocumentAttachments = function () {
	    var DocNo = `@Model.No`;
        var status = '@Model.Status';
       
	    $.ajax({
		    async: true,
		    type: "POST",
		    datatype: "json",
		    contentType: "application/json; charset = utf-8",
		    processData: false,
            data: JSON.stringify({ DocNo: DocNo, documentStatus: status }),
            url: "/Common/EdmsDocumentAttachmentList",
		    success: function (data) {
			    $("#divAttachDocs").html(data);
		    },
		    error: function () {
			    Swal.fire("There is some problem to process your request. Please try after some time");
		    }
	    });
    };

    var AddAttachment = function () {
        $("#labelF").text("File Upload");
        ShowProgress();
        $.ajax({
            async: true,
            type: "GET",
            datatype: "html",
            url: '/Common/FileUploadForm',
            success: function (data) {
                $("#modalBody").html(data);
                HideProgress();
                $("#myModal").modal("show");
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    };

    var SaveAttachmentFile = function () {
	    var DocNo = `@Model.No`;
	    var filename; var base64String; var filetype;
        var files = document.getElementById('AttachmentFile').files;
	    if (files.length) {
		    var file = files[0];
            if (file.size > 50000000) {
                Swal.fire('Warning', 'Please only files less than 50MB allowed. Thanks!!', 'warning');
            }
		    else {
			    var blob = file.slice();
			    filetype = file.type;
			    filename = file.name;
			    var reader = new FileReader();
			    reader.onloadend = function (evt) {
				    if (evt.target.readyState == FileReader.DONE) {
					    var cont = evt.target.result
					    base64String = getB64Str(cont);
					    ShowProgress();
					    $.ajax({
						    type: "POST",
						    url: "/Common/SaveAttachedFile",
                            data: JSON.stringify({ DocNo: DocNo, base64Upload: base64String, fileName: filename, Extn: filetype, TableID: 77352, module: "PJM", documentType:"User Request"}),
						    contentType: "application/json; charset=utf-8",
						    dataType: "json",
						    success: function (data) {
							    if (data.success) {
								    HideProgress();
								    $("#myModal").modal("hide");
								    Swal.fire('Success', data.message, 'success');
                                    GetDocumentAttachments();
							    }
							    else {
                                    GetDocumentAttachments();
								    Swal.fire('Warning', data.message, 'warning');
								    HideProgress();
							    }
						    },
						    error: function (err) {
							    HideProgress();
							    Swal.fire('Warning', err, 'warning');
						    }
					    });
				    }
			    };
			    reader.readAsArrayBuffer(blob);
		    }
	    }
    };
    function getB64Str(buffer) {
        var binary = '';
        var bytes = new Uint8Array(buffer);
        var len = bytes.byteLength;
        for (var i = 0; i < len; i++) {
            binary += String.fromCharCode(bytes[i]);
        }
        return window.btoa(binary);
    }
    var DeleteAttachment = function (docId, line) {
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            dataType: "json",
            data: JSON.stringify({
                documentId: docId,
                lineNo: line
            }),
            contentType: "application/json; charset=utf-8",
            processData: false,
            url: '/Common/RemoveFileAsync',
            success: function (data) {
                HideProgress();
                if (data.success === true) {
                    Swal.fire('Success', data.message, 'success');
                    GetDocumentAttachments();
                } else {
                    Swal.fire('Error', data.message, 'error');
                    GetDocumentAttachments();
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err.responseText, 'warning');
            }
        });
    };

    var ViewAttachment = function (moduleCheck, docNo, docId) {
        $.ajaxSetup({ cache: false });
        ShowProgress();
        var viewer = $("#modalAttachmentBody");
        viewer.empty();

        $.ajax({
            url: '/Common/GetEdmsDocuments',
            type: "GET",
            datatype: "json",
            cache: false,
            contentType: "application/json; charset=utf-8",
            data: {
                module: moduleCheck,
                documentNo: docNo,
                documentType: "User request",
                documentId: docId
            },
            success: function (data) {
                if (data.success) {
                    if (data.base64) {
                        var mimeType = data.mimeType || 'application/pdf';

                        if (mimeType.startsWith('application/pdf')) {

                            var byteCharacters = atob(data.base64);
                            var byteNumbers = new Array(byteCharacters.length);
                            for (var i = 0; i < byteCharacters.length; i++) {
                                byteNumbers[i] = byteCharacters.charCodeAt(i);
                            }
                            var byteArray = new Uint8Array(byteNumbers);
                            var blob = new Blob([byteArray], { type: mimeType });
                            var blobUrl = URL.createObjectURL(blob);


                            viewer.html('<iframe src="' + blobUrl + '" style="width:100%; height:500px;" frameborder="0"></iframe>');
                        } else if (mimeType.startsWith('image/')) {

                            viewer.html('<img src="data:' + mimeType + ';base64,' + data.base64 + '" style="width:100%;"/>');
                        } else {
                            var blob = b64toBlob(data.base64, mimeType);
                            var url = window.URL.createObjectURL(blob);
                            window.open(url, '_blank');
                        }
                        $("#myModalAttachment").modal("show");
                    } else {

                        window.location = '/Common/AttachmentDownload?fileName=' + data.message;
                        Swal.fire('Success', 'Document Downloaded successfully', 'success');
                    }
                } else {
                    Swal.fire('Warning', data.message, 'warning');
                }
                HideProgress();
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Error', err.responseText || 'An error occurred', 'error');
            }
        });
    };
    function b64toBlob(base64, contentType) {
        var byteCharacters = atob(base64);
        var byteArrays = [];

        for (var offset = 0; offset < byteCharacters.length; offset += 512) {
            var slice = byteCharacters.slice(offset, offset + 512);

            var byteNumbers = new Array(slice.length);
            for (var i = 0; i < slice.length; i++) {
                byteNumbers[i] = slice.charCodeAt(i);
            }

            var byteArray = new Uint8Array(byteNumbers);
            byteArrays.push(byteArray);
        }

        return new Blob(byteArrays, { type: contentType });
    }

    var SubmitRequest = function (DocNo) {
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            data: JSON.stringify({ DocNo: DocNo }),
            contentType: "application/json; charset = utf-8",
            processData: false,
            url: '/ProjectManagement/SubmitRequest',
            success: function (data) {
                if (data.success == true) {
                    HideProgress();
                    Swal.fire('Success', "Record submitted successfully", 'success').then(() => {
                       /* ViewDoc(data.message);*/
                        window.location.href ="ProjectManagement/UserRequests";
                    });
                } else {
                    HideProgress();
                    Swal.fire('Error', data.message, 'error');
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    }
    var ReceiveUserRequest = function (UserRequestNo) {
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            data: JSON.stringify({ UserRequestNo: UserRequestNo }),
            contentType: "application/json; charset = utf-8",
            processData: false,
            url: '/ProjectManagement/ReceiveUserRequest',
            success: function (data) {
                if (data.success == true) {
                    HideProgress();
                    Swal.fire('Success', data.message, 'success').then(() => {
                        ViewDoc(data.message);
                       /* window.location.reload;*/
                    });
                } else {
                    HideProgress();
                    Swal.fire('Error', data.message, 'error');
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    }
    var CreateProjectLeadSelection = function (UserRequestNo) {
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            data: JSON.stringify({ UserRequestNo: UserRequestNo }),
            contentType: "application/json; charset = utf-8",
            processData: false,
            url: '/ProjectManagement/CreateProjectLeadSelection',
            success: function (data) {
                if (data.success == true) {
                    HideProgress();
                    Swal.fire('Success', data.message, 'success').then(() => {
                        ViewDoc(data.message);
                        /*window.location.reload;*/
                    });
                } else {
                    HideProgress();
                    Swal.fire('Error', data.message, 'error');
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    }

</script>

