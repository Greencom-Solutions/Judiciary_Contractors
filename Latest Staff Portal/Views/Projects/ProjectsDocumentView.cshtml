@model Latest_Staff_Portal.ViewModel.ProjectProposal

@{
    ViewBag.Title = "ProjectsDocumentView";
    Layout = "~/Views/Shared/Sitemaster.cshtml";
}
<style>
    thead {
        background-color: black;
        color: white;
    }

    hr {
        margin: 4px;
    }

    .BtnPadding {
        padding: 1px;
        font-size: 12px;
    }
</style>
<div class="page-header">
    <div class="row">
        <div class="col-sm-12">
            <ul class="breadcrumb">
                <li class="breadcrumb-item">
                    <a href="#" onclick="PurchaseRequisitionLink();">Project Requests</a>
                </li>
                <li class="breadcrumb-item active">Open Project Request(@Model.No)</li>
            </ul>
        </div>
    </div>
</div>
<div class="card">
    @*<div style="text-align:right" id="HideEditButton">
        @{
            if (@Model.Status == "Open")
            {
                <div style="text-align:right" id="HideEditButton">
                    <input type="button" style="background: #162f25; color:whitesmoke; border-radius:10px" id="btnEdit" value="Edit Header" onclick="EditDocument();" />
                </div>
            }
        }


        <hr />
    </div>*@
    <div class="card-body">
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("No", new { @class = "control-label col-md-12" })
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.No, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.No, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Name", new { @class = "control-label col-md-12" })

                    <div class="col-md-12">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

        </div>
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Department", new { @class = "control-label col-md-12" })
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.GlobalDimension2Code, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.GlobalDimension2Code, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Administration Unit Name", new { @class = "control-label col-md-12" })

                    <div class="col-md-12">
                        @Html.EditorFor(model => model.AdministrationUnitName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.AdministrationUnitName, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

        </div>
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Request Description", new { @class = "control-label col-md-12" })

                    <div class="col-md-12">
                        @Html.EditorFor(model => model.RequestDescription, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.RequestDescription, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Justification", new { @class = "control-label col-md-12" })

                    <div class="col-md-12">
                        @Html.EditorFor(model => model.Justification, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Justification, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

        </div>
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Created By", new { @class = "control-label col-md-12" })
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.CreatedBy, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CreatedBy, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Employee Number", new { @class = "control-label col-md-12" })

                    <div class="col-md-12">
                        @Html.EditorFor(model => model.EmployeeNo, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.EmployeeNo, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

        </div>
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Employee Name", new { @class = "control-label col-md-12" })

                    <div class="col-md-12">
                        @Html.EditorFor(model => model.EmployeeName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.EmployeeName, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Status", new { @class = "control-label col-md-12" })

                    <div class="col-md-12">
                        @Html.EditorFor(model => model.Status, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

        </div>
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Deferal Comments", new { @class = "control-label col-md-12" })
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.DeferalComments, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.DeferalComments, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

        </div>
    </div>
    @{
        if (Model.Status == "Open")
        {
            <div align="center">
                <input type="button" class="btn btn-primary waves-effect waves-light" value="Send (@Model.No) To Next Stage" onclick="SendDocForApproval('@Model.No');"/>
            </div>
        }
    }
</div>
<script src="~/assets/js/ShowProgression.js"></script>
<script src="~/assets/js/pdfobject.min.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        var status = `@Model.Status`;
        HideHeaderEditInput(status);

        var Successmsg = '@Request.RequestContext.HttpContext.Session["SuccessMsg"]';
        if (Successmsg != "") {
            Swal.fire('Success', Successmsg, 'success', true);
            $.ajax({
                type: "POST",
                url: "/Common/NullibySessions"
            });
        }


    });
    var GetDocumentAttachments = function () {
        ShowProgress();
        var DocNo = `@Model.No`;
        var Status = `@Model.Status`;
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ DocNo: DocNo, TableID: 77352, Status: Status}),
            url: "/Common/DocumentAttachments",
            success: function (data) {
                HideProgress();
                $("#divAttachDocs").html(data);
            },
            error: function () {
                HideProgress();
                Swal.fire("There is some problem to process your request. Please try after some time");
            }
        });
    };
    var ProjectRequisitionLink = function () {
        ShowProgress();
        window.location = "/Projects/ProjectProposalList";
    }
    var EditDocument = function () {
         var status = `@Model.Status`;
        if ($("#btnEdit").val() == "Edit Header") {
            $("#btnEdit").val("Clear Header Edit");
            $("#ddlDim2,#ddlDim1,#ddlDim3,#ddlDim4,#ddlDim5,#ddlDim6,#ddlRespC").select2({
                width: '100%'
            })
            ShowHeaderEditInput();
        }
        else {
            HideHeaderEditInput(status);
            $("#btnEdit").val("Edit Header");
        }
    }
    var HideHeaderEditInput = function (Status) {
        if (Status == "Open") {
            $("#HideEditButton").show();
            $("#HideLineButton").show();
            $("#DivSendForApproval").show();
        }
        else {
            $("#HideEditButton").hide();
            $("#HideLineButton").hide();
            $("#DivSendForApproval").hide();
        }
        $("#DivUpdateButton").hide();
        $("#dtPicker,#txtPurpose,#ddlDim2,#ddlDim1,#ddlDim3,#DdlRequisitionType,#ddlDim4,#ddlDim5,#ddlDim6,#ddlDim7,#ddlRespC").css("background-color", "#dedebd");
        $("#txtPurpose,#dtPicker,#txtPurpose,#ddlDim2,#ddlDim1,#ddlDim3,#DdlRequisitionType,#ddlDim4,#ddlDim5,#ddlDim6,#ddlDim7,#ddlRespC").attr("readonly", true);

    }
    var ShowHeaderEditInput = function () {
        $("#DivUpdateButton").show();
        $("#dtPicker,#txtPurpose,#ddlDim2,#ddlDim1,#ddlDim3,#ddlDim3,#ddlDim4,#ddlDim5,#ddlDim6,#ddlDim7,#ddlRespC,#DdlRequisitionType").css("background-color", "white");
        $("#txtPurpose,#dtPicker,#txtPurpose,#ddlDim2,#ddlDim1,#ddlDim3,#ddlDim3,#ddlDim4,#ddlDim5,#ddlDim6,#ddlDim7,#ddlRespC,#DdlRequisitionType").attr("readonly", false);
    }
    var UpdatePurchaseHeader = function () {
        var DocNo = `@Model.No`;
        var Dim1 = $("#ddlDim1").children("option:selected").val();
        var Dim2 = $("#ddlDim2").children("option:selected").val();
        var Dim3 = $("#ddlDim3").children("option:selected").val();
        var Dim4 = $("#ddlDim4").children("option:selected").val();
        var Dim5 = $("#ddlDim5").children("option:selected").val();
        var Dim6 = $("#ddlDim6").children("option:selected").val();
        var Dim6 = $("#ddlDim6").children("option:selected").val();
        var Dim7 = $("#ddlDim7").children("option:selected").val();
        var Remarks = $("#txtPurpose").val().replace(/(\r\n|\n|\r)/gm, " ");
        var RespC = $("#ddlRespC").children("option:selected").val();
        var RequisitionType = $("#DdlRequisitionType").children("option:selected").val();

        if (RequisitionType == "") {
            Swal.fire('Warning', "Select Requisition Type", 'warning');
            return;
        }
        if (RequisitionType == "General") {
            RequisitionType = "0";
        }
        if (RequisitionType == "Operations") {
            RequisitionType = "1";
        }
        if (RequisitionType == "Printing and Branding") {
            RequisitionType = "2";
        }
        if (Dim1 == "") {
            Swal.fire('Warning', "Select Donor", 'warning');
            return;
        }
        else if (Dim2 == "") {
            Swal.fire('Warning', "Select Project", 'warning');
            return;
        }
        else if (Dim3 == "") {
            Swal.fire('Warning', "Select Pogram", 'warning');
            return;
        }
        else if (Dim4 == "") {
            Swal.fire('Warning', "Select Activity", 'warning');
            return;
        }
        else if (Dim5 == "") {
            Swal.fire('Warning', "Select County", 'warning');
            return;
        }
        else if ((Dim6 == "") && (Dim1 == "CDC")) {
            Swal.fire('Warning', "Select Major Cost Category", 'warning');
            return;
        }
        else if (RespC == "") {
            Swal.fire('Warning', "Select Responsibility Centre", 'warning');
            return;
        }
        else if (Remarks == "") {
            Swal.fire('Warning', "Enter purpose for the purchase", 'warning');
            return;
        }
        else if (Remarks.length > 1000) {
            Swal.fire('Warning', "Your Reason should have a maximum of 1000 characters", 'warning');
            return;
        }
        else {
            var PRVHeader = {};
            var DocD = {};
            PRVHeader.Dim1 = Dim1;
            PRVHeader.Dim2 = Dim2;
            PRVHeader.Dim3 = Dim3;
            PRVHeader.Dim4 = Dim4;
            PRVHeader.Dim5 = Dim5;
            PRVHeader.Dim6 = Dim6;
            PRVHeader.Dim7 = Dim7;
            PRVHeader.RespC = RespC;
            PRVHeader.Remarks = Remarks;
            PRVHeader.RequisitionType = RequisitionType;
            PRVHeader.DocD = DocD;

            ShowProgress();
            //Send the JSON array to Controller using AJAX.
            $.ajax({
                type: "POST",
                url: "/Purchase/UpdatePurchaseHeader",
                data: JSON.stringify({ DocNo: DocNo, prvHeader: PRVHeader }),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    if (data.success) {
                        HideProgress();
                        HideHeaderEditInput("Open");
                        $("#btnEdit").val("Edit Header");
                        $("#txtPurpose").val(Remarks);
                        Swal.fire('Success', data.message, 'success');
                    }
                    else {
                        Swal.fire('Warning', data.message, 'warning');
                        HideProgress();
                    }
                },
                error: function (err) {
                    HideProgress();
                    Swal.fire('Warning', err, 'warning');
                }
            });
        };
    }
    var AddAttachment = function () {
        $("#lblTitl").text("File Upload");
        ShowProgress();
        $.ajax({
            async: true,
            type: "GET",
            datatype: "html",
            url: '/Purchase/FileUploadForm',
            success: function (data) {
                $("#modalBody").html(data);
                HideProgress();
                $("#myModal").modal("show");
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    };
    var SaveAttachmentFile = function () {
        var DocNo = `@Model.No`;
        var filename; var base64String; var filetype;
        var files = document.getElementById('PurchasefileAttachment').files;
        if (files.length) {
            var file = files[0];
            if (file.size > 10000000) {
                Swal.fire('Warning', 'Please only files less than 10MB allowed. Thanks!!', 'warning');
            }
            else {
                var blob = file.slice();
                filetype = file.type;
                filename = file.name;
                var reader = new FileReader();
                reader.onloadend = function (evt) {
                    if (evt.target.readyState == FileReader.DONE) { // DONE == 2
                        var cont = evt.target.result
                        base64String = getB64Str(cont);
                        ShowProgress();
                        //Send the JSON array to Controller using AJAX.
                        $.ajax({
                            type: "POST",
                            url: "/Common/SaveAttachedFile",
                            data: JSON.stringify({ DocNo: DocNo, base64Upload: base64String, fileName: filename, Extn: filetype, TableID: 38 }),
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (data) {
                                if (data.success) {
                                    HideProgress();
                                    GetDocumentAttachments();
                                    $("#myModal").modal("hide");
                                    Swal.fire('Success', data.message, 'success');
                                }
                                else {
                                    Swal.fire('Warning', data.message, 'warning');
                                    HideProgress();
                                }
                            },
                            error: function (err) {
                                HideProgress();
                                Swal.fire('Warning', err, 'warning');
                            }
                        });
                    }
                };
                reader.readAsArrayBuffer(blob);
            }
        }
    };
    function getB64Str(buffer) {
        var binary = '';
        var bytes = new Uint8Array(buffer);
        var len = bytes.byteLength;
        for (var i = 0; i < len; i++) {
            binary += String.fromCharCode(bytes[i]);
        }
        return window.btoa(binary);
    }
    var ViewAttachment = function (tbl, No, Id, fName, ext) {
        $.ajaxSetup({ cache: false });
        ShowProgress();
        $.ajax({
            cache: false,
            url: '/Common/DocumentAttachmentview',
            type: "POST",
            datatype: "json",
            cache: false,
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ tblID: tbl, No: No, ID: Id, fileName: fName, ext: ext }),
            success: function (data) {
                if (data.success == true) {
                    if (data.view == true) {
                        var viewer = $("#modalAttachmentBody");
                        if (ext == "pdf") {
                            PDFObject.embed("data:application/" + ext + ";base64," + data.message + "", viewer);
                        }
                        if (ext == "png" || ext == "jpg") {
                            PDFObject.embed("data:image/" + ext + ";base64," + data.message + "", viewer);
                        }
                        $("#myModalAttachment").modal("show");
                        HideProgress();
                    }
                    else {
                        window.location = '/Common/AttachmentDownload?fileName=' + data.message;
                        Swal.fire('Success', 'Document Downloaded successfully', 'success');
                        HideProgress();
                    }
                }
                else {
                    HideProgress();
                    Swal.fire('Warning', data.message, 'warning');
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    };
    var DeleteAttachment = function (tbl, No, Id) {
        $.ajaxSetup({ cache: false });
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            type: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.value) {
                ShowProgress();
                $.ajax({
                    cache: false,
                    url: '/Common/DeleteAttachedDocument',
                    datatype: "json",
                    type: "POST",
                    data: JSON.stringify({ DocNo: No, tblID: tbl, DocID: Id }),
                    contentType: "application/json; charset = utf-8",
                    success: function (data) {
                        if (data.success == true) {
                            HideProgress();
                            GetDocumentAttachments();
                            Swal.fire('Success', 'File Deleted Successfully', 'success');
                        }
                        else {
                            HideProgress();
                            Swal.fire('Warning', data.message, 'warning');
                        }
                    },
                    error: function (err) {
                        HideProgress();
                        Swal.fire('Warning', err, 'warning');
                    }
                });
            }
            else {
                Swal.fire('Cancelled', 'Attachment File has not been deleted', 'error');
            }
        });
    };
    var EditItem = function (DocNo, LnNo) {
        $("#lblTitl").text("New Purchase Line");
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ LnNo: LnNo, DocNo: DocNo }),
            url: '/Purchase/EditPurchaseLine',
            success: function (data) {
                $("#modalBody").html(data);
                HideProgress();
                $("#myModal").modal("show");
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    };


	var SendDocForApproval = function (DocNo) {
            ShowProgress();
            $.ajax({
                async: true,
                type: "POST",
                datatype: "json",
                data: JSON.stringify({ documentNo: DocNo }),
                contentType: "application/json; charset = utf-8",
                processData: false,
                url: '/Projects/SendProjectToNextStage',
                success: function (data) {
                    if (data.success == true) {
                        HideProgress();
                        window.location = data.message;
                    }
                    else {
                        HideProgress();
                        Swal.fire('Error', data.message, 'error');
                    }
                },
                error: function (err) {
                    HideProgress();
                    Swal.fire('Warning', err, 'warning');
                }
            });
        
    }



</script>