@model Latest_Staff_Portal.ViewModel.InstructionRequestCard


@{
    ViewBag.Title = "ContractsDocumentView";
    Layout = "~/Views/Shared/Sitemaster.cshtml";
    var loggedInUserID = ViewBag.loggedInUserID;
}


@* Bootstrap CSS *@
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
@* Bootstrap Bundle JS (includes Popper.js) *@
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<style>
    .accordion-button:not(.collapsed) {
        background-color: #103424 !important; /* Green background */
        color: white !important; /* White text for contrast */
    }

    .accordion-button {
        transition: background-color 0.3s ease; /* Smooth transition effect */
    }


    .breadcrumb-item a {
        text-decoration: none;
    }

    a {
        text-decoration: none;
    }
</style>



<div class="page-headers">
    <div class="row">
        <div class="col-sm-12">
            <ul class="breadcrumb">
                <li class="breadcrumb-item"><a href="#" onclick="ContractorInstructionRequestLink();" style="color: #000">Contractor Instruction Request List</a></li>
                <li class="breadcrumb-item active">Contractor Instruction Request Document</li>
            </ul>
        </div>
    </div>
</div>
<hr />
<br />

<div class="card">
    <div class="card-header">
        <h4>Contractor Instruction Request Document</h4>
        <div style="text-align:right; margin-bottom: 20px">
            @{
                if (@Model.Status == "New")
                {
                    <button class="btn btn-primary" style="background: #162f25; color: whitesmoke; border-radius: 10px" onclick="SubmitContractorInstructionRequest('@Model.No');">
                        <i class="fa fa-check" aria-hidden="true"></i> Submit Request
                    </button>
                }
                if (@Model.Status == "Actioned") //done on contractor portal
                {
                    <button class="btn btn-primary btn-sm" style="background: #162f25; color: whitesmoke; border-radius: 10px" onclick="AcknowledgeAction('@Model.No');">
                        <i class="fa fa-check" aria-hidden="true"></i>Acknowledge Action
                    </button>
                }
            }
        </div>
    </div>

    <div class="card-body">
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.No, htmlAttributes: new { @class = "control-label col-md-12" })

                    @Html.EditorFor(model => model.No, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.No, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Project_No, htmlAttributes: new { @class = "control-label col-md-12" })

                    @Html.EditorFor(model => model.Project_No, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Project_No, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Project_Name, htmlAttributes: new { @class = "control-label col-md-12" })

                    @Html.EditorFor(model => model.Project_Name, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Project_Name, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Contractor_No, htmlAttributes: new { @class = "control-label col-md-12" })

                    @Html.EditorFor(model => model.Contractor_No, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Contractor_No, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Contractor_Name, htmlAttributes: new { @class = "control-label col-md-12" })

                    @Html.EditorFor(model => model.Contractor_Name, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Contractor_Name, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Document_Type, htmlAttributes: new { @class = "control-label col-md-12" })

                    @Html.EditorFor(model => model.Document_Type, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Document_Type, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Date_of_Submittion, htmlAttributes: new { @class = "control-label col-md-12" })

                    @Html.EditorFor(model => model.Date_of_Submittion, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Date_of_Submittion, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Date_of_Receipt, htmlAttributes: new { @class = "control-label col-md-12" })

                    @Html.EditorFor(model => model.Date_of_Receipt, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Date_of_Receipt, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Received_By, htmlAttributes: new { @class = "control-label col-md-12" })

                    @Html.EditorFor(model => model.Received_By, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Received_By, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-12" })

                    @Html.EditorFor(model => model.Status, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                </div>
            </div>

        </div>

        <div class="accordion" id="accordionExample" >


            <!-- Accordion Item 1- Comment Input Section -->
            <div class="accordion-item">
                <h2 class="accordion-header" id="headingOne">
                    <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                        Instructions
                    </button>
                </h2>
                <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
                    <div class="accordion-body">
                        <div id="" style="margin: 10px 20px">
                            <div class="row mt-3">

                                <div class="col-md-12">
                                    <div class="form-group">
                                        @Html.Label("Instruction", htmlAttributes: new { @class = "control-label col-md-12" })

                                        @*  @Html.EditorFor(model => model.Instruction_Request, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @id = "Instruction_Request" } })*@
                                        <textarea class="form-control" rows="3" id="Contractor_Comment"
                                                  @(Model.Status != "New" ? "readonly" : "")>@Model.Instruction_Request</textarea>

                                    </div>
                                </div>
                                @*<div class="col-md-6">
                                    <div class="form-group">
                                        @Html.Label("Instruction Notes", htmlAttributes: new { @class = "control-label col-md-12" })
                                        <textarea class="form-control" rows="3" id="Instruction_Notes" value="@(Model.Instruction_Notes)"></textarea>

                                    </div>
                                </div>*@
                            </div>

                        </div>
                    </div>
                </div>
            </div>

        </div>

        <div class="row mb-5">

            @* <div class="row mt-5">
                <h5 class="mb-3">Contractor Request Lines</h5>
                <hr />
                <div id="divContractorRequestLines"></div>
                <hr />
            </div>

            <div class="row mt-5" >
                <h5 class="mb-3">Comments</h5>
                <hr />
                <div id="divComments"></div>
                <hr />
            </div>

            <div class="row mt-5" >
                <h5 class="mb-3">Tender Evaluation Committee Members</h5>
                <hr />
                <div id="divCommitteeMembers"></div>
                <hr />
            </div>*@
            <div class="row mt-5">
                <b>Document Attachments</b>
                <hr />
                <div id="divAttachDocs"></div>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content bg-white">
            <div class="modal-header">
                <h4 class="modal-title"><label id="labelF"></label></h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modalBody"></div>
        </div>
    </div>
</div>

<!-- Modal View Doc -->
<div class="modal fade" id="myModalAttachment" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content bg-white">
            <div class="modal-header">
                <h4 class="modal-title">Attachment</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modalAttachmentBody" style="width:100%;height:450px"></div>
        </div>
    </div>
</div>

@*//////////////////////Modal////////////////////////////*@
<div class="modal" id="assignEmployeeModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-sm" role="document">
        <div class="modal-content bg-white">
            <div class="modal-header">
                <h4 class="modal-title">Assign Employee</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="assignEmployeeModalBody">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger waves-effect " data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>



<script>
    $(document).ready(function () {
        LoadContractorRequestLines(`@Model.No`);
        $('.select2').select2();
    });

    var LoadContractorRequestLines = function (No) {
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "html",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ No: No }),
            url: "/Contractor/ContractorRequestLinesPartialView",
            success: function (data) {
                $("#divContractorRequestLines").html(data);
                HideProgress();
                LoadContractorRequestComments(No)
            },
            error: function () {
                LoadContractorRequestComments(No);
                Swal.fire("There is some problem to process your request. Please try after some time");
            }
        });
    };
    var LoadContractorRequestComments = function (No) {
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "html",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ No: No }),
            url: "/Contractor/ContractorRequestCommentsPartialView",
            success: function (data) {
                $("#divComments").html(data);
                HideProgress();
                LoadTenderEvaluationCommittee(No);
            },
            error: function () {
                HideProgress();
                LoadTenderEvaluationCommittee(No);
                Swal.fire("There is some problem to process your request. Please try after some time");
            }
        });
    };
    var LoadTenderEvaluationCommittee = function (No) {
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "html",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ No: No }),
            url: "/Contractor/TenderEvaluationCommitteePartialView",
            success: function (data) {
                $("#divCommitteeMembers").html(data);
                HideProgress();
                GetDocumentAttachments();
            },
            error: function () {
                HideProgress();
                Swal.fire("There is some problem to process your request. Please try after some time");
            }
        });
    };


    function ContractorInstructionRequestLink(status) {
        window.location.href = `ContractorInstructionRequests`;
    }
    var ViewDoc = function (DocNo) {
        ShowProgress();
        var form = $('<form>', {
            action: '/Contractor/ContractorInstructionRequestsDocumentView',
            method: 'POST'
        }).append($('<input>', {
            type: 'hidden',
            name: 'No',
            value: DocNo
        }));
        form.appendTo('body').submit();
    };

    //actions


    function SubmitContractorInstructionRequest() {
        var RequestNo = `@Model.No`;
        var Contractor_Comment = $('#Contractor_Comment').val();
        if (!Contractor_Comment) {
            Swal.fire('Warning', 'Instruction required', 'warning');
            return;
        }

        ShowProgress();
        $.ajax({
            type: "POST",
            url: '/Contractor/SubmitContractorInstructionRequest',
            data: { RequestNo: RequestNo, Contractor_Comment: Contractor_Comment },
            success: function (response) {
                HideProgress();
                if (response.success) {
                    Swal.fire('Success', 'Record successfully submitted', 'success');
                    window.location.reload();
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err.responseText || 'An error occurred', 'warning');
            }
        });
    }


    function ReceiveContractorExtensionRequest(No) {
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ DocNo: No }),
            url: "/Contractor/ReceiveContractorExtensionRequest",
            success: function (data) {
                if (data.success) {
                    HideProgress();
                    Swal.fire("Success", "Record submitted", "success");
                    ViewDoc(No)
                } else {
                    HideProgress();
                    Swal.fire("Warning", data.message, "warning");
                }
            },
            error: function () {
                HideProgress();
                Swal.fire("Warning", "There is some problem to process your request. Please try after some time", "warning");
            }
        });
    }
    function SendExtensionReqToAssistantDirector(No) {
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ DocNo: No }),
            url: "/Contractor/SendExtensionReqToAssistantDirector",
            success: function (data) {
                if (data.success) {
                    HideProgress();
                    Swal.fire("Success", "Record submitted", "success");
                    ViewDoc(No)
                   /* window.location.reload;*/
                } else {
                    HideProgress();
                    Swal.fire("Warning", data.message, "warning");
                }
            },
            error: function () {
                HideProgress();
                Swal.fire("Warning", "There is some problem to process your request. Please try after some time", "warning");
            }
        });
    }
    function SubmitToTeamLeadForApproval(No) {
        var Memo_Comments = $('#Memo_Comments').val();
        var Key_Comments = $('#Key_Comments').val();
        if (!Memo_Comments) {
            Swal.fire("Warning", "Memo Notes required", "warning");
            return;
        }

        if (!Key_Comments) {
            Swal.fire("Warning", "Key Comments required", "warning");
            return;
        }





        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ DocNo: No, Memo_Comments: Memo_Comments, Key_Comments: Key_Comments  }),
            url: "/Contractor/SubmitToTeamLeadForApproval",
            success: function (data) {
                if (data.success) {
                    HideProgress();
                    Swal.fire("Success", "Record submitted", "success");
                    ViewDoc(No)
                    /* window.location.reload;*/
                } else {
                    HideProgress();
                    Swal.fire("Warning", data.message, "warning");
                }
            },
            error: function () {
                HideProgress();
                Swal.fire("Warning", "There is some problem to process your request. Please try after some time", "warning");
            }
        });
    }
    function TeamLeadApproveExtSubmission(No) {
        var Team_Lead_General_Comments = $('#Team_Lead_General_Comments').val();
        if (!Team_Lead_General_Comments) {
            Swal.fire("Warning", "Team Lead General Comments required", "warning");
            return;
        }
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ DocNo: No, Team_Lead_General_Comments: Team_Lead_General_Comments }),
            url: "/Contractor/TeamLeadApproveExtSubmission",
            success: function (data) {
                if (data.success) {
                    HideProgress();
                    Swal.fire("Success", "Document Approved", "success");
                    ViewDoc(No)
                    /* window.location.reload;*/
                } else {
                    HideProgress();
                    Swal.fire("Warning", data.message, "warning");
                }
            },
            error: function () {
                HideProgress();
                Swal.fire("Warning", "There is some problem to process your request. Please try after some time", "warning");
            }
        });
    }
    function TeamLeadRejectExtSubmission(No) {
        var Team_Lead_General_Comments = $('#Team_Lead_General_Comments').val();
        if (!Team_Lead_General_Comments) {
            Swal.fire("Warning", "Team Lead General Comments required", "warning");
            return;
        }

        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ DocNo: No, Team_Lead_General_Comments: Team_Lead_General_Comments }),
            url: "/Contractor/RejectSubmission",
            success: function (data) {
                if (data.success) {
                    HideProgress();
                    Swal.fire("Success", "Document Rejected", "success");
                    ViewDoc(No)
                    /* window.location.reload;*/
                } else {
                    HideProgress();
                    Swal.fire("Warning", data.message, "warning");
                }
            },
            error: function () {
                HideProgress();
                Swal.fire("Warning", "There is some problem to process your request. Please try after some time", "warning");
            }
        });
    }
    function ApproveAndSubmitToCRJ(No) {
        var Key_Comments = $('#Key_Comments').val();
        if (!Key_Comments) {
            Swal.fire("Warning", "Comments required", "warning");
            return;
        }
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ DocNo: No, Key_Comments: Key_Comments }),
            url: "/Contractor/ApproveAndSubmitToCRJ",
            success: function (data) {
                if (data.success) {
                    HideProgress();
                    Swal.fire("Success", "Document Approved", "success");
                    ViewDoc(No)
                    /* window.location.reload;*/
                } else {
                    HideProgress();
                    Swal.fire("Warning", data.message, "warning");
                }
            },
            error: function () {
                HideProgress();
                Swal.fire("Warning", "There is some problem to process your request. Please try after some time", "warning");
            }
        });
    }
    function PMRejectSubmission(No) {
        var Key_Comments = $('#Key_Comments').val();
        if (!Key_Comments) {
            Swal.fire("Warning", "Comments required", "warning");
            return;
        }
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ DocNo: No, Key_Comments: Key_Comments }),
            url: "/Contractor/PMRejectSubmission",
            success: function (data) {
                if (data.success) {
                    HideProgress();
                    Swal.fire("Success", "Document Rejected", "success");
                    ViewDoc(No)
                    /* window.location.reload;*/
                } else {
                    HideProgress();
                    Swal.fire("Warning", data.message, "warning");
                }
            },
            error: function () {
                HideProgress();
                Swal.fire("Warning", "There is some problem to process your request. Please try after some time", "warning");
            }
        });
    }
    function SendToSupplyChain(No) {
        var Key_Comments = $('#Key_Comments').val();
        if (!Key_Comments) {
            Swal.fire("Warning", "Comments required", "warning");
            return;
        }
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ DocNo: No, Key_Comments: Key_Comments }),
            url: "/Contractor/SendToSupplyChain",
            success: function (data) {
                if (data.success) {
                    HideProgress();
                    Swal.fire("Success", "Document sent to DSCM", "success");
                    ViewDoc(No)
                    /* window.location.reload;*/
                } else {
                    HideProgress();
                    Swal.fire("Warning", data.message, "warning");
                }
            },
            error: function () {
                HideProgress();
                Swal.fire("Warning", "There is some problem to process your request. Please try after some time", "warning");
            }
        });
    }
    function CRJRejectSubmission(No) {
        var Key_Comments = $('#Key_Comments').val();
        if (!Key_Comments) {
            Swal.fire("Warning", "Comments required", "warning");
            return;
        }
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ DocNo: No, Key_Comments: Key_Comments }),
            url: "/Contractor/CRJRejectSubmission",
            success: function (data) {
                if (data.success) {
                    HideProgress();
                    Swal.fire("Success", "Document Rejected", "success");
                    ViewDoc(No)
                    /* window.location.reload;*/
                } else {
                    HideProgress();
                    Swal.fire("Warning", data.message, "warning");
                }
            },
            error: function () {
                HideProgress();
                Swal.fire("Warning", "There is some problem to process your request. Please try after some time", "warning");
            }
        });
    }

    //attachments
    var GetDocumentAttachments = function () {
        var DocNo = `@Model.No`;
        var status2 = '@Model.Status';
        if (status2 == "New") {
            var status="Open"
        }
        $.ajax({
           async: true,
           type: "POST",
           datatype: "json",
           contentType: "application/json; charset = utf-8",
           processData: false,
                 data: JSON.stringify({ DocNo: DocNo, documentStatus: status }),
                 url: "/Common/EdmsDocumentAttachmentList",
           success: function (data) {
            $("#divAttachDocs").html(data);
           },
           error: function () {
            Swal.fire("There is some problem to process your request. Please try after some time");
           }
        });
    };
    var AddAttachment = function () {
         $("#labelF").text("File Upload");
         ShowProgress();
         $.ajax({
             async: true,
             type: "GET",
             datatype: "html",
             url: '/Common/FileUploadForm',
             success: function (data) {
                 $("#modalBody").html(data);
                 HideProgress();
                 $("#myModal").modal("show");
             },
             error: function (err) {
                 HideProgress();
                 Swal.fire('Warning', err, 'warning');
             }
         });
     };
    var SaveAttachmentFile = function () {
      var DocNo = `@Model.No`;
      var filename; var base64String; var filetype;
         var files = document.getElementById('AttachmentFile').files;
      if (files.length) {
       var file = files[0];
             if (file.size > 50000000) {
                 Swal.fire('Warning', 'Please only files less than 50MB allowed. Thanks!!', 'warning');
             }
       else {
        var blob = file.slice();
        filetype = file.type;
        filename = file.name;
        var reader = new FileReader();
        reader.onloadend = function (evt) {
	        if (evt.target.readyState == FileReader.DONE) {
		        var cont = evt.target.result
		        base64String = getB64Str(cont);
		        ShowProgress();
		        $.ajax({
			        type: "POST",
			        url: "/Common/SaveAttachedFile",
                             data: JSON.stringify({ DocNo: DocNo, base64Upload: base64String, fileName: filename, Extn: filetype, TableID: 77352, module: "PJM", documentType:"User Request"}),
			        contentType: "application/json; charset=utf-8",
			        dataType: "json",
			        success: function (data) {
				        if (data.success) {
					        HideProgress();
					        $("#myModal").modal("hide");
					        Swal.fire('Success', data.message, 'success');
                                     GetDocumentAttachments();
				        }
				        else {
                                     GetDocumentAttachments();
					        Swal.fire('Warning', data.message, 'warning');
					        HideProgress();
				        }
			        },
			        error: function (err) {
				        HideProgress();
				        Swal.fire('Warning', err, 'warning');
			        }
		        });
	        }
        };
        reader.readAsArrayBuffer(blob);
       }
      }
     };
    function getB64Str(buffer) {
         var binary = '';
         var bytes = new Uint8Array(buffer);
         var len = bytes.byteLength;
         for (var i = 0; i < len; i++) {
             binary += String.fromCharCode(bytes[i]);
         }
         return window.btoa(binary);
     }
    var DeleteAttachment = function (docId, line) {
         ShowProgress();
         $.ajax({
             async: true,
             type: "POST",
             dataType: "json",
             data: JSON.stringify({
                 documentId: docId,
                 lineNo: line
             }),
             contentType: "application/json; charset=utf-8",
             processData: false,
             url: '/Common/RemoveFileAsync',
             success: function (data) {
                 HideProgress();
                 if (data.success === true) {
                     Swal.fire('Success', data.message, 'success');
                     GetDocumentAttachments();
                 } else {
                     Swal.fire('Error', data.message, 'error');
                     GetDocumentAttachments();
                 }
             },
             error: function (err) {
                 HideProgress();
                 Swal.fire('Warning', err.responseText, 'warning');
             }
         });
     };
    var ViewAttachment = function (moduleCheck, docNo, docId) {
         $.ajaxSetup({ cache: false });
         ShowProgress();
         var viewer = $("#modalAttachmentBody");
         viewer.empty();

         $.ajax({
             url: '/Common/GetEdmsDocuments',
             type: "GET",
             datatype: "json",
             cache: false,
             contentType: "application/json; charset=utf-8",
             data: {
                 module: moduleCheck,
                 documentNo: docNo,
                 documentType: "User request",
                 documentId: docId
             },
             success: function (data) {
                 if (data.success) {
                     if (data.base64) {
                         var mimeType = data.mimeType || 'application/pdf';

                         if (mimeType.startsWith('application/pdf')) {

                             var byteCharacters = atob(data.base64);
                             var byteNumbers = new Array(byteCharacters.length);
                             for (var i = 0; i < byteCharacters.length; i++) {
                                 byteNumbers[i] = byteCharacters.charCodeAt(i);
                             }
                             var byteArray = new Uint8Array(byteNumbers);
                             var blob = new Blob([byteArray], { type: mimeType });
                             var blobUrl = URL.createObjectURL(blob);


                             viewer.html('<iframe src="' + blobUrl + '" style="width:100%; height:500px;" frameborder="0"></iframe>');
                         } else if (mimeType.startsWith('image/')) {

                             viewer.html('<img src="data:' + mimeType + ';base64,' + data.base64 + '" style="width:100%;"/>');
                         } else {
                             var blob = b64toBlob(data.base64, mimeType);
                             var url = window.URL.createObjectURL(blob);
                             window.open(url, '_blank');
                         }
                         $("#myModalAttachment").modal("show");
                     } else {

                         window.location = '/Common/AttachmentDownload?fileName=' + data.message;
                         Swal.fire('Success', 'Document Downloaded successfully', 'success');
                     }
                 } else {
                     Swal.fire('Warning', data.message, 'warning');
                 }
                 HideProgress();
             },
             error: function (err) {
                 HideProgress();
                 Swal.fire('Error', err.responseText || 'An error occurred', 'error');
             }
         });
     };
    function b64toBlob(base64, contentType) {
         var byteCharacters = atob(base64);
         var byteArrays = [];

         for (var offset = 0; offset < byteCharacters.length; offset += 512) {
             var slice = byteCharacters.slice(offset, offset + 512);

             var byteNumbers = new Array(slice.length);
             for (var i = 0; i < slice.length; i++) {
                 byteNumbers[i] = slice.charCodeAt(i);
             }

             var byteArray = new Uint8Array(byteNumbers);
             byteArrays.push(byteArray);
         }

         return new Blob(byteArrays, { type: contentType });
     }


    function AcknowledgeAction(No) {
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ DocNo: No }),
            url: "/Contractor/AcknowledgeAction",
            success: function (data) {
                if (data.success) {
                    HideProgress();
                    Swal.fire("Success", "Document Acknowledgement successful", "success");
                    ViewDoc(No)
                    /* window.location.reload;*/
                } else {
                    HideProgress();
                    Swal.fire("Warning", data.message, "warning");
                }
            },
            error: function () {
                HideProgress();
                Swal.fire("Warning", "There is some problem to process your request. Please try after some time", "warning");
            }
        });
    }


</script>



